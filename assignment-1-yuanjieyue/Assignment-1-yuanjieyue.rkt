#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 82 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1239 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 267
(
 #"#reader(lib \"htdp-beginner-reader.ss\" \"lang\")((modname Assignmen"
 #"t-1-yuanjieyue) (read-case-sensitive #t) (teachpacks ((lib \"image.r"
 #"kt\" \"teachpack\" \"2htdp\"))) (htdp-settings #(#t constructor repe"
 #"ating-decimal #f #t none #f ((lib \"image.rkt\" \"teachpack\" \"2htd"
 #"p\")) #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 16 #";;> TOTAL: 42/44"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;> For future assignments, make sure you stay within 80 characters "
 #"per line. "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 1"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; Data Definition"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; A Year is a PosInt"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; WHERE: 1000 <= PosInt <=9999"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; INTERP: represents a year with four digits"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; leap-year?: Year -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; GIVEN:a"
0 0 17 3 1 #" "
0 0 17 3 25 #"year of four-digit number"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; RETURN: true if the year is a leap year,"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;         false otherwise"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;(leap-year? 1204) => #true"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;          (leap-year? 1900) => #false"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"leap-year?"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"["
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"leap-year?"
0 0 24 3 1 #" "
0 0 21 3 4 #"1001"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"leap-year?"
0 0 24 3 1 #" "
0 0 21 3 4 #"1204"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"leap-year?"
0 0 24 3 1 #" "
0 0 21 3 4 #"1900"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"leap-year?"
0 0 24 3 1 #" "
0 0 21 3 4 #"2000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; string-add-prefix: String String -> String"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";;> In the future, write out the full data type name: String String "
 #"-> String"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; GIVEN: two strings"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; RETURN: a new word"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 48 #"string-add-prefix \"define\" \"re-\") => \"re-define\""
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;; Function Defintion"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-prefix"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-prefix"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"define\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"re-\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 11 #"\"re-define\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-prefix"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"view\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"re\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 8 #"\"review\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Signture"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; string-add-suffix: String String -> String"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; GIVEN: two strings"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; RETURN: a new word "
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;> (grammar) return *a new word"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;(string-add-suffix \"game\" \"s\") => \"games\""
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-suffix"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-suffix"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"game\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 7 #"\"games\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-suffix"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"low\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"er\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 7 #"\"lower\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; string-join: String String -> String"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; GIVEN: two strings"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; RETURN: a string"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; (string-join \"this\" \"that\") => \"this,that\""
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 14 3 5 #"str-1"
0 0 24 3 1 #" "
0 0 14 3 5 #"str-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 5 #"str-1"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 5 #"str-2"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 14 3 5 #"str-1"
0 0 24 3 1 #" "
0 0 14 3 5 #"str-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-prefix"
0 0 24 3 1 #" "
0 0 14 3 5 #"str-2"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-prefix"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 5 #"str-1"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 14 3 5 #"str-1"
0 0 24 3 1 #" "
0 0 14 3 5 #"str-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-suffix"
0 0 24 3 1 #" "
0 0 14 3 5 #"str-1"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 24 3 1 #"("
0 0 14 3 17 #"string-add-suffix"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 5 #"str-2"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;> this function can be solved using your functions add-prefix and "
 #"add-suffix"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"this\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"that\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 11 #"\"this,that\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"is\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"this\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 9 #"\"is,this\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 3"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; iff: Boolean Boolean -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; GIVEN: two booleans"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;> -1 (grammar) *return true or false"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;> The purpose statement should describe that you are implementing "
 #"the logical"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";;> operator iff. Not how"
0 0 17 3 4 #" you"
0 0 17 3 1 #" "
0 0 17 3 11 #"implemented"
0 0 17 3 1 #" "
0 0 17 3 2 #"it"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 8 #"checking"
0 0 17 3 1 #" "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 4 #"they"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 9 #"the same)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; RETURN: #true or #false"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (iff #true #true) => #true"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; (iff #true #false) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; (iff #false #false) => #true"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; (iff #false #true) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"iff"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 9 #"boolean=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"boolean=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"iff"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 3 1 #"("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;> This function can be solved using only logical operators (not, a"
 #"nd, or, ...)"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";;> can you do it?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;> -1 missing test cases. test all combinations of inputs"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"iff"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"iff"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"iff"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"iff"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 4"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; (total-tax): number -> number"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; given a number as the total yearly salary, which should be a posi"
 #"tive number"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; return total tax which should be calculated according to the tax-"
 #"rate table"
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #";; example: (total-tax 10000) should produce 1500"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"total-tax"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"["
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 4 #"9275"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.10"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 4 #"9275"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 5 #"37650"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.15"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 5 #"37650"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 5 #"91150"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.25"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 5 #"91150"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 6 #"190150"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.28"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 6 #"190150"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 6 #"413350"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.33"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 6 #"413350"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 6 #"415050"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.35"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 6 #"415050"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 13 #"yearly-income"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.396"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"total-tax"
0 0 24 3 1 #" "
0 0 21 3 4 #"5000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"total-tax"
0 0 24 3 1 #" "
0 0 21 3 5 #"10000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 4 #"1500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"total-tax"
0 0 24 3 1 #" "
0 0 21 3 5 #"50000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 5 #"12500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"total-tax"
0 0 24 3 1 #" "
0 0 21 3 6 #"100000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 5 #"28000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"total-tax"
0 0 24 3 1 #" "
0 0 21 3 6 #"300000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 5 #"99000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"total-tax"
0 0 24 3 1 #" "
0 0 21 3 6 #"415000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 6 #"145250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"total-tax"
0 0 24 3 1 #" "
0 0 21 3 6 #"500000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 6 #"198000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 5"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; (text-stylize\357\274\211: string symbol -> image"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; given a string and a symbol which stylizes the mode of the string"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; return an image of the string that is printed with the symboled s"
 #"tyle"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";; example: (text-stylize \""
0 0 17 3 5 #"Hello"
0 0 17 3 1 #" "
0 0 17 3 5 #"world"
0 0 17 3 24 #"\" 'title) should produce"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 6           4 17 1881
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:translate 13.0 20.5 #(stru"
 #"ct:text \"H\" 0 1 \"blue\" 36 #f swiss normal normal #f))) #(struct:"
 #"translate 26.0 0.0 #(struct:translate 10.0 20.5 #(struct:text \"e\" "
 #"0 1 \"blue\" 36 #f swiss normal normal #f))))) #(struct:translate 46"
 #".0 0.0 #(struct:translate 3.5 20.5 #(struct:text \"l\" 0 1 \"blue\" "
 #"36 #f swiss normal normal #f))))) #(struct:translate 53.0 0.0 #(stru"
 #"ct:translate 3.5 20.5 #(struct:text \"l\" 0 1 \"blue\" 36 #f swiss n"
 #"ormal normal #f))))) #(struct:translate 60.0 0.0 #(struct:translate "
 #"10.0 20.5 #(struct:text \"o\" 0 1 \"blue\" 36 #f swiss normal normal"
 #" #f))))) #(struct:translate 80.0 0.0 #(struct:translate 5.0 20.5 #(s"
 #"truct:text \" \" 0 1 \"blue\" 36 #f swiss normal normal #f))))) #(st"
 #"ruct:translate 90.0 0.0 #(struct:t"
 #"ranslate 12.5 20.5 #(struct:text \"w\" 0 1 \"blue\" 36 #f swiss norm"
 #"al normal #f))))) #(struct:translate 115.0 0.0 #(struct:translate 10"
 #".0 20.5 #(struct:text \"o\" 0 1 \"blue\" 36 #f swiss normal normal #"
 #"f))))) #(struct:translate 135.0 0.0 #(struct:translate 6.0 20.5 #(st"
 #"ruct:text \"r\" 0 1 \"blue\" 36 #f swiss normal normal #f))))) #(str"
 #"uct:translate 147.0 0.0 #(struct:translate 3.5 20.5 #(struct:text \""
 #"l\" 0 1 \"blue\" 36 #f swiss normal normal #f))))) #(struct:translat"
 #"e 154.0 0.0 #(struct:translate 10.0 20.5 #(struct:text \"d\" 0 1 \"b"
 #"lue\" 36 #f swiss normal normal #f))))) #(struct:translate 174.0 0.0"
 #" #(struct:translate 5.5 20.5 #(struct:text \"!\" 0 1 \"blue\" 36 #f "
 #"swiss normal normal #f)))) #(struct:bb 185.0 41.0 33.0) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"text-stylize"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"["
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"title"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 2 #"36"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"code"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 3 1 #"]"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;> These tests fail. Make sure dr.racket can run successfully befor"
 #"e submitting"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";;> an assignment."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"text-stylize"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Hello world!\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"title"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 6           4 21 1881
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:translate 13.0 20.5 #(stru"
 #"ct:text \"H\" 0 1 \"blue\" 36 #f swiss normal normal #f))) #(struct:"
 #"translate 26.0 0.0 #(struct:translate 10.0 20.5 #(struct:text \"e\" "
 #"0 1 \"blue\" 36 #f swiss normal normal #f))))) #(struct:translate 46"
 #".0 0.0 #(struct:translate 3.5 20.5 #(struct:text \"l\" 0 1 \"blue\" "
 #"36 #f swiss normal normal #f))))) #(struct:translate 53.0 0.0 #(stru"
 #"ct:translate 3.5 20.5 #(struct:text \"l\" 0 1 \"blue\" 36 #f swiss n"
 #"ormal normal #f))))) #(struct:translate 60.0 0.0 #(struct:translate "
 #"10.0 20.5 #(struct:text \"o\" 0 1 \"blue\" 36 #f swiss normal normal"
 #" #f))))) #(struct:translate 80.0 0.0 #(struct:translate 5.0 20.5 #(s"
 #"truct:text \" \" 0 1 \"blue\" 36 #f swiss normal normal #f))))) #(st"
 #"ruct:translate 90.0 0.0 #(struct:t"
 #"ranslate 12.5 20.5 #(struct:text \"w\" 0 1 \"blue\" 36 #f swiss norm"
 #"al normal #f))))) #(struct:translate 115.0 0.0 #(struct:translate 10"
 #".0 20.5 #(struct:text \"o\" 0 1 \"blue\" 36 #f swiss normal normal #"
 #"f))))) #(struct:translate 135.0 0.0 #(struct:translate 6.0 20.5 #(st"
 #"ruct:text \"r\" 0 1 \"blue\" 36 #f swiss normal normal #f))))) #(str"
 #"uct:translate 147.0 0.0 #(struct:translate 3.5 20.5 #(struct:text \""
 #"l\" 0 1 \"blue\" 36 #f swiss normal normal #f))))) #(struct:translat"
 #"e 154.0 0.0 #(struct:translate 10.0 20.5 #(struct:text \"d\" 0 1 \"b"
 #"lue\" 36 #f swiss normal normal #f))))) #(struct:translate 174.0 0.0"
 #" #(struct:translate 5.5 20.5 #(struct:text \"!\" 0 1 \"blue\" 36 #f "
 #"swiss normal normal #f)))) #(struct:bb 185.0 41.0 33.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"text-stylize"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Hello world!\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 6           4 21 1885
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:translate 8.5 13.5 #(struc"
 #"t:text \"H\" 0 1 \"black\" 24 #f swiss normal normal #f))) #(struct:"
 #"translate 17.0 0.0 #(struct:translate 6.5 13.5 #(struct:text \"e\" 0"
 #" 1 \"black\" 24 #f swiss normal normal #f))))) #(struct:translate 30"
 #".0 0.0 #(struct:translate 3.0 13.5 #(struct:text \"l\" 0 1 \"black\""
 #" 24 #f swiss normal normal #f))))) #(struct:translate 36.0 0.0 #(str"
 #"uct:translate 3.0 13.5 #(struct:text \"l\" 0 1 \"black\" 24 #f swiss"
 #" normal normal #f))))) #(struct:translate 42.0 0.0 #(struct:translat"
 #"e 6.5 13.5 #(struct:text \"o\" 0 1 \"black\" 24 #f swiss normal norm"
 #"al #f))))) #(struct:translate 55.0 0.0 #(struct:translate 3.5 13.5 #"
 #"(struct:text \" \" 0 1 \"black\" 24 #f swiss normal normal #f))))) #"
 #"(struct:translate 62.0 0.0 #(struct:translate 8.5 13.5 #(struct:text"
 #" \"w\" 0 1 \"black\" 24 #f swiss normal normal #f))))) #(struct:tran"
 #"slate 79.0 0.0 #(struct:translate"
 #" 6.5 13.5 #(struct:text \"o\" 0 1 \"black\" 24 #f swiss normal norma"
 #"l #f))))) #(struct:translate 92.0 0.0 #(struct:translate 4.0 13.5 #("
 #"struct:text \"r\" 0 1 \"black\" 24 #f swiss normal normal #f))))) #("
 #"struct:translate 100.0 0.0 #(struct:translate 3.0 13.5 #(struct:text"
 #" \"l\" 0 1 \"black\" 24 #f swiss normal normal #f))))) #(struct:tran"
 #"slate 106.0 0.0 #(struct:translate 7.0 13.5 #(struct:text \"d\" 0 1 "
 #"\"black\" 24 #f swiss normal normal #f))))) #(struct:translate 120.0"
 #" 0.0 #(struct:translate 4.0 13.5 #(struct:text \"!\" 0 1 \"black\" 2"
 #"4 #f swiss normal normal #f)))) #(struct:bb 128.0 27.0 21.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"text-stylize"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Hello world!\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"code"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 6           4 21 1858
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:translate 6.5 11.5 #(struc"
 #"t:text \"H\" 0 1 \"red\" 20 #f swiss normal normal #f))) #(struct:tr"
 #"anslate 13.0 0.0 #(struct:translate 5.5 11.5 #(struct:text \"e\" 0 1"
 #" \"red\" 20 #f swiss normal normal #f))))) #(struct:translate 24.0 0"
 #".0 #(struct:translate 2.0 11.5 #(struct:text \"l\" 0 1 \"red\" 20 #f"
 #" swiss normal normal #f))))) #(struct:translate 28.0 0.0 #(struct:tr"
 #"anslate 2.0 11.5 #(struct:text \"l\" 0 1 \"red\" 20 #f swiss normal "
 #"normal #f))))) #(struct:translate 32.0 0.0 #(struct:translate 5.5 11"
 #".5 #(struct:text \"o\" 0 1 \"red\" 20 #f swiss normal normal #f)))))"
 #" #(struct:translate 43.0 0.0 #(struct:translate 3.0 11.5 #(struct:te"
 #"xt \" \" 0 1 \"red\" 20 #f swiss normal normal #f))))) #(struct:tran"
 #"slate 49.0 0.0 #(struct:translate"
 #" 7.5 11.5 #(struct:text \"w\" 0 1 \"red\" 20 #f swiss normal normal "
 #"#f))))) #(struct:translate 64.0 0.0 #(struct:translate 5.5 11.5 #(st"
 #"ruct:text \"o\" 0 1 \"red\" 20 #f swiss normal normal #f))))) #(stru"
 #"ct:translate 75.0 0.0 #(struct:tr"
 #"anslate 3.5 11.5 #(struct:text \"r\" 0 1 \"red\" 20 #f swiss normal "
 #"normal #f))))) #(struct:translate 82.0 0.0 #(struct:translate 2.0 11"
 #".5 #(struct:text \"l\" 0 1 \"red\" 20 #f swiss normal normal #f)))))"
 #" #(struct:translate 86.0 0.0 #(struct:translate 5.5 11.5 #(struct:te"
 #"xt \"d\" 0 1 \"red\" 20 #f swiss normal normal #f))))) #(struct:tran"
 #"slate 97.0 0.0 #(struct:translate"
 #" 3.0 11.5 #(struct:text \"!\" 0 1 \"red\" 20 #f swiss normal normal "
 #"#f)))) #(struct:bb 103.0 23.0 19.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 6"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; (image>?): image image -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; given two images as input."
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; return #true if both the width and height of the first image are "
 #"larger"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #";; than"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"second"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 9 #"otherwise"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 6 #"return"
0 0 17 3 7 #" #false"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; example: (image>? "
0 6           4 17 220
(
 #"(#(struct:overlay #(struct:translate 10 10 #(struct:translate 20 20 "
 #"#(struct:ellipse 40 40 0 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:translate 30 30 #(struct:ellipse 60 60 0 255 \"black\")))) #(str"
 #"uct:bb 60 60 60) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 91
(
 #"(#(struct:translate 25/2 25 #(struct:ellipse 25 50 0 255 \"blue\")) "
 #"#(struct:bb 25 50 50) #f)"
) 0 0 17 3 22 #") should produce #true"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"image>?"
0 0 24 3 1 #" "
0 0 14 3 6 #"image1"
0 0 24 3 1 #" "
0 0 14 3 6 #"image2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 6 #"image1"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 6 #"image2"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"image-height"
0 0 24 3 1 #" "
0 0 14 3 6 #"image1"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"image-height"
0 0 24 3 1 #" "
0 0 14 3 6 #"image2"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;> The cond here is unnecessary. Can you think of a way of removing"
 #" it?"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"image>?"
0 0 24 3 1 #" "
0 6           4 21 220
(
 #"(#(struct:overlay #(struct:translate 10 10 #(struct:translate 20 20 "
 #"#(struct:ellipse 40 40 0 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:translate 30 30 #(struct:ellipse 60 60 0 255 \"black\")))) #(str"
 #"uct:bb 60 60 60) #f)"
) 0 0 24 3 1 #" "
0 6           4 21 91
(
 #"(#(struct:translate 25/2 25 #(struct:ellipse 25 50 0 255 \"blue\")) "
 #"#(struct:bb 25 50 50) #f)"
) 0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"image>?"
0 0 24 3 1 #" "
0 6           4 21 220
(
 #"(#(struct:overlay #(struct:translate 10 10 #(struct:translate 20 20 "
 #"#(struct:ellipse 40 40 0 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:translate 30 30 #(struct:ellipse 60 60 0 255 \"black\")))) #(str"
 #"uct:bb 60 60 60) #f)"
) 0 0 24 3 1 #" "
0 6           4 21 91
(
 #"(#(struct:translate 25/2 35 #(struct:ellipse 25 70 0 255 \"blue\")) "
 #"#(struct:bb 25 70 70) #f)"
) 0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0           0
